task wrapper(type: Wrapper) {
    gradleVersion = '3.2.1'
}

buildscript {
    ext {
        springBootVersion = '1.5.1.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

configurations {
//    compile.exclude module: "spring-boot-starter-tomcat"
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'application'
apply plugin: 'org.springframework.boot'
apply plugin: 'distribution'
apply plugin: 'jdepend'
apply plugin: 'signing'

jar {
    baseName = 'erpserver'
    version = '1.0.0'
}

war {
    baseName = 'erpserver'
    version = '1.0.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

springBoot {
    executable = true
}

dependencies {

    testCompile group: 'junit', name: 'junit', version: '4.12'

    //compile('org.springframework.boot:spring-boot-starter-actuator')
    //compile('org.springframework.boot:spring-boot-actuator-docs')
    compile('org.springframework.boot:spring-boot-starter-aop')
    //compile('org.springframework.boot:spring-boot-starter-cache')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    //compile('org.springframework.boot:spring-boot-starter-data-rest')
    //compile('org.springframework.data:spring-data-rest-hal-browser')
    //compile('org.springframework.boot:spring-boot-starter-jersey')
    //compile('org.springframework.boot:spring-boot-starter-mobile')
    //compile('org.springframework.boot:spring-boot-starter-remote-shell')
    //compile('org.springframework.retry:spring-retry')
    //compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.session:spring-session')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    //compile('org.springframework.boot:spring-boot-starter-validation')
    compile('org.springframework.boot:spring-boot-starter-web')
    //compile('org.springframework.boot:spring-boot-starter-web-services')
    //compile('org.springframework.boot:spring-boot-starter-websocket')
    runtime('org.springframework.boot:spring-boot-devtools')
    compileOnly('org.projectlombok:lombok')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-autoconfigure
    compile group: 'org.springframework.boot', name: 'spring-boot-autoconfigure'

    // https://mvnrepository.com/artifact/org.mongodb/mongo-java-driver
    compile group: 'org.mongodb', name: 'mongo-java-driver', version: '3.4.2'

    // https://mvnrepository.com/artifact/joda-time/joda-time
    compile group: 'joda-time', name: 'joda-time', version: '2.9.7'

    // https://mvnrepository.com/artifact/net.time4j/time4j-parent
    compile group: 'net.time4j', name: 'time4j-parent', version: '4.24'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'

    // https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on
    compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.56'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.6'

    // https://mvnrepository.com/artifact/org.springframework.session/spring-session-data-mongo
    compile group: 'org.springframework.session', name: 'spring-session-data-mongo', version: '1.3.0.RELEASE'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-configuration-processor
    compile group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-jetty
    //compile group: 'org.springframework.boot', name: 'spring-boot-starter-jetty'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-tomcat
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat'

    // https://mvnrepository.com/artifact/commons-io/commons-io
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
}

task cleanAll {
    group = 'minify'
    doFirst {
        tasks.cleanCSS.execute()
        tasks.cleanJS.execute()
    }
}

task cleanCSS {
    group = 'minify'
    doLast {
        String basePath = 'src/main/resources/static/stylesheets/site';
        FileTree tree = project.fileTree(dir: basePath);
        tree.include "**/*.css"
        tree.exclude "**/*.scss"
        tree.exclude "**/*.css.map"

        tree.visit { FileVisitDetails element ->
            if (!element.isDirectory()) {
                element.file.delete()
            }
        }
    }
}

task cleanJS {
    group = 'minify'
    doLast {
        String basePath = 'src/main/resources/static/javascripts/site';
        FileTree tree = project.fileTree(dir: basePath);
        tree.include "**/*.min.js"
        tree.exclude "**/*.js.map"
        tree.exclude "**/*.ts"
        tree.exclude "**/*.d.ts"

        tree.visit { FileVisitDetails element ->
            if (!element.isDirectory()) {
                element.file.delete()
            }
        }
    }
}

task sass {
    group = 'minify'
    doLast {
        String basePath = 'src/main/resources/static/stylesheets/site';
        FileTree tree = project.fileTree(dir: basePath);
        tree.include "**/*.scss"
        tree.exclude "**/*.css"
        tree.exclude "**/*.css.map"

        tree.visit { FileVisitDetails element ->
            if (!element.isDirectory()) {
                String filePath = basePath + "/" + element.getPath()

                int pos = filePath.lastIndexOf(".")
                String newFilePath = ""

                if (pos > 0) {
                    newFilePath = filePath.substring(0, pos) + ".css"
                }

                String cmd=""
                String osName= System.getProperty("os.name")

                if (osName.startsWith("Windows"))
                {
                    cmd = String.format("cmd.exe /c node-sass $filePath $newFilePath")
                }
                else{
                    cmd = String.format("node-sass $filePath $newFilePath")
                }

                java.lang.Runtime.getRuntime().exec(cmd)
            }
        }
    }
}

task csso {
    group = 'minify'
    doLast {
        String basePath = 'src/main/resources/static/stylesheets/site';
        FileTree tree = project.fileTree(dir: basePath);
        tree.include "**/*.css"
        tree.exclude "**/*.min.css"
        tree.exclude "**/*.css.map"
        tree.exclude "**/*.scss"

        tree.visit { FileVisitDetails element ->
            if (!element.isDirectory()) {
                String filePath = basePath + "/" + element.getPath();

                int pos = filePath.lastIndexOf(".");
                String newFilePath = "";

                if (pos > 0) {
                    newFilePath = filePath.substring(0, pos) + ".min.css";
                }

                String cmd=""
                String osName= System.getProperty("os.name")

                if (osName.startsWith("Windows"))
                {
                    cmd = String.format("cmd.exe /c csso -i $filePath -o $newFilePath")
                }
                else{
                    cmd = String.format("csso -i $filePath -o $newFilePath")
                }

                java.lang.Runtime.getRuntime().exec(cmd)
            }
        }
    }
}


task uglify {
    group = 'minify'
    doLast {
        String basePath = 'src/main/resources/static/javascripts/site';
        FileTree tree = project.fileTree(dir: basePath);
        tree.include "**/*.js"
        tree.exclude "**/*.min.js"
        tree.exclude "**/*.js.map"
        tree.exclude "**/*.ts"
        tree.exclude "**/*.d.ts"

        tree.visit { FileVisitDetails element ->
            if (!element.isDirectory()) {
                String filePath = basePath + "/" + element.getPath();

                int pos = filePath.lastIndexOf(".");
                String newFilePath = "";

                if (pos > 0) {
                    newFilePath = filePath.substring(0, pos) + ".min.js";
                }


                String cmd=""
                String osName= System.getProperty("os.name");

                if (osName.startsWith("Windows"))
                {
                    cmd = String.format("cmd.exe /c uglifyjs $filePath -o $newFilePath")
                }
                else{
                    cmd = String.format("uglifyjs $filePath -o $newFilePath")
                }

                java.lang.Runtime.getRuntime().exec(cmd)
            }
        }
    }
}

sass.mustRunAfter cleanCSS
csso.mustRunAfter sass
uglify.mustRunAfter cleanJS

task minify{
    group = 'minify'
    doFirst{

    }
    doLast{
        tasks.cleanCSS.execute()
        tasks.cleanJS.execute()
        sleep(3000)
        tasks.sass.execute()
        sleep(5000)
        tasks.csso.execute()
        tasks.uglify.execute()
        tasks.increaseBuildNumber.execute()
    }
}

task minifyJS{
    group = 'minify'
    doFirst{

    }
    doLast{
        tasks.cleanJS.execute()
        sleep(3000)
        tasks.uglify.execute()
    }
}

task minifyCSS{
    group = 'minify'
    doFirst{

    }
    doLast{
        tasks.cleanCSS.execute()
        sleep(3000)
        tasks.sass.execute()
        sleep(5000)
        tasks.csso.execute()
    }
}

task increaseBuildNumber{
    group='minify'
    doLast{
        String path="src/main/resources/build.txt"
        File file=project.file(path)

        String line1= file.readLines()[0]
        Integer buildNumber= Integer.parseInt(line1)

        buildNumber+=1
        String output=buildNumber.toString()

        BufferedWriter writer= file.newWriter(false)
        writer.writeLine(output)
        writer.flush()
        writer.close()
    }
}